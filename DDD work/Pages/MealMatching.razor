@page "/meal-match"
@using DDD_work.Models
@using DDD_work.Services
@using DDD_work.Services.Auth
@inject MealMatchService MealMatchService
@inject UserService UserService
@inject UserDataService UserDataService
@inject IJSRuntime JsRuntime
@inject MealMatchDataService MealMatchDataService

<h1 class="text-center text-primary">Meal Matching</h1>

<div class="container mt-4">
    <button class="btn btn-success mb-3" @onclick="ShowPostMealModal">Post a Meal Match</button>

    @if (meals == null)

    {
        <p><em>Loading meals...</em></p>
    }

    else if (meals.Count == 0)

    {
        <p>No meal matches available at the moment.</p>
    }

    else

    {
        <div class="row">
            @foreach (var meal in meals)

            {
                <div class="col-md-4">
                    <div class="card shadow-sm mb-3">
                        <div class="card-body">
                            <h5 class="card-title">@meal.Name</h5>
                            <p><b>Time:</b> @meal.MealTime.ToString("f")</p>
                            <p><b>Location:</b> @(string.IsNullOrEmpty(meal.Location) ? "Not specified" : meal.Location)</p>
                            <button @onclick="() => ShowMealDetails(meal)" class="btn btn-primary">View</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (showMealDetails && selectedMeal != null)

{
    <div class="meal-details">
        <h3>@selectedMeal.Name</h3>
        <p><strong>Posted By:</strong> @mealPoster?.FullName</p>
        <p><strong>Description:</strong> @selectedMeal.Description</p>
        @if (!string.IsNullOrEmpty(selectedMeal.Location))

        {
            <p><strong>Location:</strong> @selectedMeal.Location</p>
        }

        else

        {
            <p><strong>Location:</strong> Not specified</p>
        }
        <p><strong>Date & Time:</strong> @selectedMeal.MealTime</p>
        <button @onclick="HandleMatch" class="btn btn-success">Match</button>
    </div>
}

@if (showPostMealModal)

{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Post a Meal Match</h5>
                    <button type="button" class="btn-close" @onclick="ClosePostMealModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control mb-2" placeholder="Meal Name" @bind="@newMeal.Name" />
                    <input type="text" class="form-control mb-2" placeholder="Location" @bind="newMeal.Location" />
                    <textarea class="form-control mb-2" placeholder="Description" @bind="newMeal.Description"></textarea>
                    <input type="datetime-local" class="form-control mb-2" @bind="@newMeal.MealTime" />
                    <label>Visibility:</label>
                    <select class="form-control mb-2" @bind="@mealVisibility">
                        <option value="Everyone">Everyone</option>
                        <option value="Connections">Connections Only</option>
                    </select>
                    @if (mealVisibility == "Connections")
                    {
                        <label>Select Connection:</label>
                        <select class="form-control mb-2" @bind="@selectedConnection">
                            @foreach (var connection in userConnections)
                            {
                                <option value="@connection.UserID">@connection.FullName</option>
                            }
                        </select>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="PostMealMatch">Post</button>
                    <button type="button" class="btn btn-secondary" @onclick="ClosePostMealModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showMatchModal)

{
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Match Confirmed</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseMatchModal"></button>
                </div>
                <div class="modal-body">
                    <p>Matched with: @mealPoster?.FullName</p>
                    <button class="btn btn-primary">Chat</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<MealMatch> meals;

    private MealMatch newMeal = new();

    private MealMatch selectedMeal;

    private bool showPostMealModal = false;

    private bool showMealDetails = false;

    private User mealPoster;

    private bool showMatchModal = false;

    private User matchedUser;

    private string mealVisibility = "Everyone";

    private long? selectedConnection;

    private List<User> userConnections = new();



    protected override async Task OnInitializedAsync()

    {

        meals = await GetMealMatchesBasedOnVisibility();

    }



    private async Task<List<MealMatch>> GetMealMatchesBasedOnVisibility()

    {

        var allMeals = await MealMatchService.GetMealMatches();

        var currentUserId = UserService.CurrentUser?.UserID;



        return allMeals.Where(meal =>

            meal.Visibility == VisibilityOption.Everyone ||

            (meal.Visibility == VisibilityOption.ConnectionsOnly && meal.AllowedUserId == currentUserId)

        ).ToList();

    }



    private async Task ShowMealDetails(MealMatch meal)

    {

        selectedMeal = meal;

        mealPoster = await UserDataService.GetUserByIdAsync(meal.PosterUserId);

        showMealDetails = true;

    }



    private void ShowPostMealModal()

    {

        showPostMealModal = true;

    }



    private void ClosePostMealModal()

    {

        showPostMealModal = false;

    }



    private async Task PostMealMatch()

    {

        newMeal.PosterUserId = (int)UserService.CurrentUser.UserID;

        newMeal.Visibility = Enum.Parse<VisibilityOption>(mealVisibility);

        newMeal.AllowedUserId = mealVisibility == "Connections" && selectedConnection.HasValue ? (int)selectedConnection.Value : (int?)null;

        newMeal.Location = string.IsNullOrWhiteSpace(newMeal.Location) ? "Not specified" : newMeal.Location;

        newMeal.Description = string.IsNullOrWhiteSpace(newMeal.Description) ? "No description provided." : newMeal.Description;

        if (newMeal.MealTime == DateTime.MinValue)

        {

            newMeal.MealTime = DateTime.Now.AddHours(1);

        }



        await MealMatchService.AddMealMatch(newMeal);

        meals = await GetMealMatchesBasedOnVisibility();

        showPostMealModal = false;

        newMeal = new MealMatch();

    }



    private async Task MatchWithUser()

    {

        if (selectedMeal != null && UserService.CurrentUser != null)

        {

            await MealMatchService.MatchWithUser((int)UserService.CurrentUser.UserID, (int)selectedMeal.Id);

            matchedUser = await UserDataService.GetUserByIdAsync((long)selectedMeal.AllowedUserId);



            if (matchedUser != null)

            {

                MealMatchDataService.MealMatches.Add((matchedUser, selectedMeal));

                MealMatchDataService.NotifyMealMatchesChanged();

            }



            showMatchModal = true;

        }

    }



    private async Task HandleMatch()

    {

        if (selectedMeal != null && UserService.CurrentUser != null)

        {

            await MealMatchService.MatchWithUser((int)UserService.CurrentUser.UserID, (int)selectedMeal.Id);

            showMatchModal = true;

        }

    }



    private void CloseMatchModal()

    {

        showMatchModal = false;

    }
}