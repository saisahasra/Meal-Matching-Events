

@page "/feed"
@using DDD_work.Models
@using DDD_work.Services
@using DDD_work.Services.Auth
@using DDD_work.Services.Match
@inject UserDataService UserDataService
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject MatchService MatchService

<h1>Main Feed</h1>

@if (UserService.IsLoggedIn)
{
    <p>Welcome, @UserService.CurrentUser?.FullName!</p>

    @if (currentProfile != null)
    {
        <div class="card" style="width: 18rem;">
            <img src="@currentProfile.ProfilePicture" class="card-img-top" alt="Profile Picture of @currentProfile.FullName">
            <div class="card-body">
                <h5 class="card-title">@currentProfile.FullName, @currentProfile.Age</h5>
                <p class="card-text">Course: @currentProfile.Course</p>
                <p class="card-text">Hobbies: @currentProfile.Hobbies</p>
                <div class="d-flex justify-content-around">
                    <button class="btn btn-danger" @onclick="() => SwipeLeft()">Decline</button>
                    <button class="btn btn-success" @onclick="() => SwipeRight()">Match</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>No more profiles to show.</p>
    }

    @if (showMatchModal)
    {
        <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Match!</h5>
                        <button type="button" class="btn-close" @onclick="CloseMatchModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>@matchNotification</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="GoToChat">Chat</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseMatchModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <button class="btn btn-secondary" @onclick="HandleLogout">Logout</button>
}
else
{
    <p>Please log in to view the feed.</p>
    <button class="btn btn-link" @onclick="NavigateToLogin">Go to Login</button>
}

@code {
    private List<User> allUsers;
    private User? currentProfile;
    private int currentProfileIndex = 0;
    private string matchNotification = "";
    private bool showMatchModal = false;

    private void HandleLogout()
    {
        UserService.ClearCurrentUser();
        NavigationManager.NavigateTo("/login");
    }

    protected override async Task OnInitializedAsync()
    {
        var users = await UserDataService.GetUsersAsync();
        if (UserService.IsLoggedIn && users.Count > 0)
        {
            var currentUser = UserService.CurrentUser;
            if (currentUser != null)
            {
                allUsers = users.Where(u => u.Username != currentUser.Username).ToList();
                if (allUsers.Any())
                {
                    currentProfile = allUsers.FirstOrDefault();
                }
            }
        }
    }

    private async Task SwipeRight()
    {
        if (currentProfile != null && UserService.CurrentUser != null)
        {
            var currentUser = UserService.CurrentUser;
            MatchService.AddPotentialMatch(currentUser.UserID, currentProfile.UserID, 0);

            if (MatchService.CheckForMutualMatch(currentUser.UserID, currentProfile.UserID, 0))
            {
                matchNotification = $"You matched with {currentProfile.FullName}!";
                showMatchModal = true;

                MatchService.AddMutualMatch(currentUser.UserID, currentProfile.UserID, 0);
            }
            StateHasChanged();
            await Task.Delay(100);
            ShowNextProfile();
        }
    }

    private void SwipeLeft()
    {
        ShowNextProfile();
    }

    private void ShowNextProfile()
    {
        if (allUsers != null && currentProfileIndex < allUsers.Count - 1)
        {
            currentProfileIndex++;
            currentProfile = allUsers[currentProfileIndex];
        }
        else
        {
            currentProfile = null;
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void CloseMatchModal()
    {
        showMatchModal = false;
        matchNotification = "";
    }

    private void GoToChat()
    {
        if (currentProfile != null && UserService.CurrentUser != null)
        {
            NavigationManager.NavigateTo($"/chat/{UserService.CurrentUser.UserID}/{currentProfile.UserID}");
        }
        CloseMatchModal();
    }
}
