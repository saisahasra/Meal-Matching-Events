@page "/events"
@using DDD_work.Models
@using DDD_work.Services
@using DDD_work.Services.Auth
@using DDD_work.Services.Match
@inject EventService EventService
@inject UserService UserService
@inject UserDataService UserDataService
@inject MatchService MatchService
@inject NavigationManager NavigationManager

<h1>Events</h1>

@if (events == null)
{
    <p><em>Loading events...</em></p>
}
else if (events.Count == 0)
{
    <p>No events available at the moment.</p>
}
else
{
    <ul>
        @foreach (var eventItem in events)
        {
            <li>
                <h3>@eventItem.Name</h3>
                <p>Date: @eventItem.DateTime.ToShortDateString()</p>
                <p>Time: @eventItem.DateTime.ToShortTimeString()</p>
                <p>Location: @eventItem.Location</p>
                @if (!string.IsNullOrEmpty(eventItem.PictureUrl))
                {
                    <img src="@eventItem.PictureUrl" alt="@eventItem.Name" style="max-width: 200px; height: auto; margin-bottom: 10px;" />
                }
                <p>Description: @eventItem.Description</p>

                @if (UserService.IsLoggedIn)
                {
                    @if (eventItem.Attendees.Contains(UserService.CurrentUser.UserID))
                    {
                        <p class="text-success">✔ You are attending this event</p>
                        @if (eventItem.Attendees.Any())
                        {
                            <h5>Attendees you can match with:</h5>
                            <ul>
                                @foreach (var attendeeId in eventItem.Attendees.Where(a => a != UserService.CurrentUser.UserID))
                                {
                                    var user = allUsers.FirstOrDefault(u => u.UserID == attendeeId);
                                    if (user != null)
                                    {
                                        <li>
                                            <div class="d-flex align-items-center">
                                                <img src="@user.ProfilePicture" alt="@user.FullName" style="width: 50px; height: 50px; border-radius: 50%; margin-right: 10px;" />
                                                <div>@user.FullName</div>
                                                <div class="ms-auto">
                                                    <button class="btn btn-success btn-sm" @onclick="() => SwipeRightEvent(user.UserID,(int)eventItem.Id)">Match</button>
                                                </div>
                                            </div>
                                        </li>
                                    }
                                }
                            </ul>
                        }
                    }
                    else
                    {
                        <button class="btn btn-success" @onclick="() => JoinEvent((int)eventItem.Id)">Join Event</button>
                    }
                }
                else
                {
                    <p>Log in to join and match.</p>
                }

                <hr />
            </li>
        }
    </ul>
}

<h2>Create a New Event</h2>
@if (UserService.IsLoggedIn)
{
    <div>
        <label>Name:</label>
        <input type="text" @bind="newEvent.Name" class="form-control" />

        <label>Date:</label>
        <input type="date" @bind="newEvent.Date" class="form-control" />

        <label>Time:</label>
        <input type="time" @bind="newEvent.DateTime" class="form-control" />

        <label>Location:</label>
        <input type="text" @bind="newEvent.Location" class="form-control" />

        <label>Description:</label>
        <textarea @bind="newEvent.Description" class="form-control"></textarea>

        <label>Picture URL:</label>
        <input type="text" @bind="newEvent.PictureUrl" class="form-control" />

        <button class="btn btn-primary mt-2" @onclick="CreateEvent">Post Event</button>
    </div>
}
else
{
    <p>Log in to post an event.</p>
}

@if (showMatchModal && matchedEventUser != null && selectedEvent != null)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Event Match!</h5>
                    <button type="button" class="btn-close" @onclick="CloseMatchModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>You matched with @matchedEventUser.FullName for @selectedEvent.Name!</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="GoToChatWithEventMatch">Chat</button>
                    <button class="btn btn-secondary" @onclick="CloseMatchModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>

    @if (showMatchPopup)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">🎉 Match Found!</h5>
                        <button type="button" class="btn-close" @onclick="CloseMatchPopup"></button>
                    </div>
                    <div class="modal-body">
                        <p>You matched with <strong>@matchedUserName</strong>!</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseMatchPopup">Close</button>
                        <button class="btn btn-primary" @onclick="StartChat">Chat</button>
                    </div>
                </div>
            </div>
        </div>
    }

}

@code {
    private List<Event> events = new();
    private List<User> allUsers = new();
    private Event newEvent = new();
    private string newEventTime;
    private User? matchedEventUser;
    private bool showMatchModal = false;
    private Event? selectedEvent;
    private bool showMatchPopup = false;
    private string matchedUserName;

    private TimeOnly? Time { get; set; }

    private string TimeString
    {
        get => Time?.ToString("HH:mm");
        set => Time = TimeOnly.TryParse(value, out var time) ? time : null;
    }

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetEventsAsync();
        allUsers = await UserDataService.GetUsersAsync();
    }

    private async Task JoinEvent(int eventId)
    {
        var selected = events.FirstOrDefault(e => e.Id == eventId);
        if (selected != null && UserService.CurrentUser != null)
        {
            long userId = UserService.CurrentUser.UserID;
            if (!selected.Attendees.Contains(userId))
            {
                selected.Attendees.Add(userId);
            }
        }
    }

    private async Task SwipeRightEvent(long otherUserId, int eventId)
    {
        var evt = events.FirstOrDefault(e => e.Id == eventId);
        selectedEvent = evt;
        if (evt != null && UserService.CurrentUser != null)
        {
            MatchService.AddPotentialMatch(UserService.CurrentUser.UserID, otherUserId, eventId);

            if (MatchService.CheckForMutualMatch(UserService.CurrentUser.UserID, otherUserId, eventId))
            {
                var matched = await UserDataService.GetUserByIdAsync(otherUserId);
                if (matched != null)
                {
                    matchedEventUser = matched;
                    showMatchModal = true;

                    // Add mutual match here
                    MatchService.AddMutualMatch(UserService.CurrentUser.UserID, otherUserId, eventId);
                }
            }
        }
    }

    private void SwipeLeftEvent()
    {
        Console.WriteLine("Declined.");
    }

    private void CloseMatchModal()
    {
        matchedEventUser = null;
        selectedEvent = null;
        showMatchModal = false;
    }

    private void GoToChatWithEventMatch()
    {
        CloseMatchModal();
    }

    private async Task CreateEvent()
    {
        if (!string.IsNullOrWhiteSpace(newEvent.Name) && !string.IsNullOrWhiteSpace(newEvent.Location))
        {
            newEvent.Id = events.Count + 1;
            events.Add(newEvent);
            newEvent = new Event();
        }
    }

    private void OnUserMatched(string userName)
    {
        matchedUserName = userName;
        showMatchPopup = true;
    }

    private void CloseMatchPopup()
    {
        showMatchPopup = false;
    }

    private void StartChat()
    {
    }
}