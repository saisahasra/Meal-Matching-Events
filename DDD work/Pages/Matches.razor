@page "/matches"
@using DDD_work.Models
@using DDD_work.Services
@using DDD_work.Services.Match
@using DDD_work.Services.Auth
@inject UserService UserService
@inject UserDataService UserDataService
@inject NavigationManager NavigationManager
@inject MatchService MatchService
@inject EventService EventService

<h1>My Matches</h1>

@if (UserService.CurrentUser == null)
{
    <p>Please log in to view your matches.</p>
}
else
{
    @if (feedMatches.Any() || eventMatches.Any())
    {
        <h2>Feed Matches</h2>
        @if (feedMatches.Any())
        {
            <ul>
                @foreach (var user in feedMatches)
                {
                    <li>
                        @user.FullName
                        <button class="btn btn-primary btn-sm ms-2" @onclick="() => GoToChat(user.UserID)">Chat</button>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No feed matches yet.</p>
        }

        <h2>Event Matches</h2>
        @if (eventMatches.Any())
        {
            <ul>
                @foreach (var match in eventMatches)
                {
                    <li>
                        @match.User.FullName - @match.Event.Name at @match.Event.DateTime.ToString("f")
                        <button class="btn btn-primary btn-sm ms-2" @onclick="() => GoToChat(match.User.UserID)">Chat</button>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No event matches yet.</p>
        }
    }
    else
    {
        <p>No matches yet.</p>
    }
}

@code {
    private List<User> feedMatches = new List<User>();
    private List<(User User, Event Event)> eventMatches = new List<(User User, Event Event)>();

    protected override async Task OnInitializedAsync()
    {
        if (UserService.CurrentUser != null)
        {
            await LoadMatches();
        }
    }

    private async Task LoadMatches()
    {
        var currentUser = UserService.CurrentUser;
        var mutualMatches = MatchService.GetMutualMatches(currentUser.UserID);

        foreach (var match in mutualMatches)
        {
            if (match.EventId == 0) // Feed match
            {
                long otherUserId = match.User1Id == currentUser.UserID ? match.User2Id : match.User1Id;
                var matchedUser = await UserDataService.GetUserByIdAsync(otherUserId);
                if (matchedUser != null)
                {
                    feedMatches.Add(matchedUser);
                }
            }
            else // Event match
            {
                long otherUserId = match.User1Id == currentUser.UserID ? match.User2Id : match.User1Id;
                var matchedUser = await UserDataService.GetUserByIdAsync(otherUserId);
                var eventItem = await EventService.GetEventByIdAsync(match.EventId);
                if (matchedUser != null && eventItem != null)
                {
                    eventMatches.Add((matchedUser, eventItem));
                }
            }
        }
    }

    private void GoToChat(long otherUserId)
    {
        if (UserService.CurrentUser != null)
        {
            NavigationManager.NavigateTo($"/chat/{UserService.CurrentUser.UserID}/{otherUserId}");
        }
    }
}